package kr.uracle.smile.module.oauth;

import lombok.Getter;
import lombok.Setter;
import org.springframework.http.MediaType;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.Part;
import java.io.BufferedReader;
import java.io.IOException;
import java.util.Collection;
import java.util.Map;

@Getter
@Setter
public abstract class AbstractOAuth10aRequestHeader {

    protected String httpMethod;

    protected String scheme;

    protected String serverName;

    protected int serverPort;

    protected String serverUrl;

    private String activityUrl;

    protected String queryString;

    protected String contentType;

    protected String requestBody;

    protected String oauthConsumerKey;

    protected String oauthConsumerSecret;

    protected  String oauthToken;

    protected String oauthVerifier;

    //   A nonce is a random string, uniquely generated by the client to allow
    //   the server to verify that a request has never been made before and
    //   helps prevent replay attacks when requests are made over a non-secure
    //   channel.  The nonce value MUST be unique across all requests with the
    //   same timestamp, client credentials, and token combinations.
    //   The parameter MAY be omitted when using the "PLAINTEXT" signature method.
    protected String oauthNonce;

    protected String oauthSignature;

    protected String summaryStartTimeInSeconds;

    protected String summaryEndTimeInSeconds;

    protected String oauthSignatureMethod = OAuth10aConstants.OAUTH_SIGNATURE_METHOD_HMAC_SHA1;

    //   The timestamp value MUST be a positive integer.  Unless otherwise
    //   specified by the server's documentation, the timestamp is expressed
    //   in the number of seconds since January 1, 1970 00:00:00 GMT.
    //   The parameter MAY be omitted when using the "PLAINTEXT" signature method.
    protected String oauthTimestamp;

    protected String oauthVersion = OAuth10aConstants.OAUTH_VERSION_1_0;

    protected boolean isMultipart;

    public AbstractOAuth10aRequestHeader() {
    }

    /**
     * Spec 3.4.1.3.1 entity-body of Parameter Sources
     * @param request
     * @return
     */
    protected String getRequestBody(HttpServletRequest request) {
        try {
            final Collection<Part> parts = request.getParts();
        } catch (IOException e) {
            throw new RuntimeException(e);
        } catch (ServletException e) {
            // extract entity-body only when request is not multipart/form-data
            if (!MediaType.APPLICATION_FORM_URLENCODED_VALUE.equals(request.getContentType())) {
                try {
                    final BufferedReader reader = request.getReader();
                    StringBuilder sb = new StringBuilder();
                    String line;
                    while ((line = reader.readLine()) != null) {
                        sb.append(line);
                    }
                    return sb.toString();
                } catch (IOException ioe) {
                    throw new RuntimeException(ioe);
                }
            }
        }
        return null;
    }

    public abstract String getRequestHeader();

    public abstract String getRequestBackFillHeader();

    public abstract String getKey();

    public abstract Map<String, String> getRequestHeaderMap();
}
